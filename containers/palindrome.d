
// Written in the D Programming Language

/**
 * palindrome.d contains the isPalindrome function.
 *
 * Copyright: (C) 2012 Nathan M. Swan
 * Authors: Nathan M. Swan, aka carlor
 * License: Boost Software License - Version 1.0
 */

/*
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * Standards: Attempts to conform to the subset of Javascript required to 
 * implement the JSON Specification.
 */

module dcaflib.containers.palindrome;

private:
import std.range;
import std.stdio;

public:

/// Calculates whether the finite range given is a palindrome. 
/// It is entirely consumed.
bool isPalindrome(R)(R range) if (isForwardRange!(R)) {
    auto backward = retro(range);
    while (!range.empty) {
        if (range.front != backward.front) {
            return false;
        }
        range.popFront();
        backward.popFront();
    }
    return true;
}

unittest {
    assert("".isPalindrome());
    assert("p".isPalindrome());
    assert("pep".isPalindrome());
    assert("peep".isPalindrome());
    
    assert(!"bo".isPalindrome());
}

